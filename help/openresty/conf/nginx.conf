
#user  nobody;
worker_processes  2;
worker_rlimit_nofile 400000;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    worker_connections  65535;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format cache_log '$remote_addr - $remote_user [$time_local] "$request" '
                         '$status $body_bytes_sent "$http_referer" '
                         '"$http_user_agent" "$http_x_forwarded_for"'
                         'cache_status=$upstream_cache_status';

    access_log logs/access.log cache_log;
    #access_log logs/access.log main;

    #sendfile       on;
    #tcp_nopush     on;
    #keepalive_timeout  65;
    keepalive_timeout  10;
    gzip  on;

    upstream prd_mainnet {
        server 127.0.0.1:8001;
        server 127.0.0.1:8011 backup;
        server 127.0.0.1:8003 backup;
        server 127.0.0.1:8013 backup;
    }
    upstream prd_testnet {
        server 127.0.0.1:8002;
        server 127.0.0.1:8012 backup;
        server 127.0.0.1:8004 backup;
        server 127.0.0.1:8014 backup;
    }
    upstream prd_testnet4 {
        server 127.0.0.1:8007;
        server 127.0.0.1:8017 backup;
        server 127.0.0.1:8008 backup;
    }

    upstream ord_mainnet {
        server 127.0.0.1:8001;
        server 127.0.0.1:8003 backup;
        server 127.0.0.1:8005 backup;
    }
    upstream ord_testnet {
        server 127.0.0.1:8002;
        server 127.0.0.1:8004 backup;
        server 127.0.0.1:8006 backup;
    }
    upstream ord_testnet4 {
        server 127.0.0.1:8008;
        server 127.0.0.1:8009 backup;
    }

    lua_package_path "/usr/local/openresty/lualib/resty/?.lua;/usr/local/openresty/lualib/resty/upstream/?.lua;;";
    proxy_cache_path /var/cache/openresty levels=1:2 keys_zone=ord_cache:500m max_size=5g inactive=30d;
    # proxy_cache_path /var/cache/openresty levels=1:2 keys_zone=ord_cache:500m max_size=5g inactive=60m;
    lua_shared_dict healthcheck 1m;
    lua_socket_log_errors off;
    init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
        # prd
        local ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "prd_mainnet",
            type = "http",
            http_req = "GET /mainnet/health HTTP/1.0\r\nHost: prd mainnet\r\n\r\n",
            interval = 30000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {
                200,
                302
            },
        }
        if not ok then
            ngx.log(ngx.ERR,"=======> failed to spawn health checker: ", err)
            # return
        end

        ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "prd_testnet",
            type = "http",
            http_req = "GET /testnet/health HTTP/1.0\r\nHost: prd testnet\r\n\r\n",
            interval = 30000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {
                200,
                302
            },
            concurrency = 1,
        }
        if not ok then
            ngx.log(ngx.ERR,"=======> failed to spawn health checker: ", err)
            # return
        end

        # ord
        local ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "ord_mainnet",
            type = "http",
            http_req = "GET /mainnet/health HTTP/1.0\r\nHost: ord mainnet\r\n\r\n",
            interval = 30000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {
                200,
                302
            },
        }
        if not ok then
            ngx.log(ngx.ERR,"=======> failed to spawn health checker: ", err)
            # return
        end

        ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "ord_testnet",
            type = "http",
            http_req = "GET /testnet/health HTTP/1.0\r\nHost: ord testnet\r\n\r\n",
            interval = 30000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {
                200,
                302
            },
            concurrency = 1,
        }
        if not ok then
            ngx.log(ngx.ERR,"=======> failed to spawn health checker: ", err)
            # return
        end

        ok, err = hc.spawn_checker {
            shm = "healthcheck",
            upstream = "ord_testnet4",
            type = "http",
            http_req = "GET /testnet/health HTTP/1.0\r\nHost: ord testnet4\r\n\r\n",
            interval = 30000,
            timeout = 5000,
            fall = 3,
            rise = 2,
            valid_statuses = {
                200,
                302
            },
            concurrency = 1,
        }
        if not ok then
            ngx.log(ngx.ERR,"=======> failed to spawn health checker: ", err)
            # return
        end
    }

    include /etc/nginx/sites-enabled/*;
}
